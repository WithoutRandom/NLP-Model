# -*- coding: utf-8 -*-
"""nlp-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/WithoutRandom/25b101b2b828a09bf4cfe5debb777f64/nlp-model.ipynb
"""


import pandas as pd
from sklearn.utils import shuffle
from sklearn.feature_extraction.text import TfidfVectorizer
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
import gradio as gr

df = pd.read_csv('train_full.csv')
df = shuffle(df).reset_index()
df

for i in range(len(df)):
  df['text'][i] = df['text'][i].lower()

df

vectorizer = TfidfVectorizer()
train_len = (len(df) - 1) - (int((len(df) - 1) * 0.2))
X_train = vectorizer.fit_transform(df['text'][:train_len])
X_test = vectorizer.transform(df['text'][train_len+1:])
y_train = df['target'][:train_len].values
y_test = df['target'][train_len+1:].values

print(len(y_train), len(y_test))
X_train

"""## Model"""

model = XGBClassifier(n_estimators=2, max_depth=2, learning_rate=1, objective='binary:logistic')
model.fit(X_train, y_train)

preds = model.predict(X_test)
correct = 0
for i, val in enumerate(preds):
  if y_test[i] == val:
    correct += 1
  
print('Accuracy: ', correct/X_test.shape[0])

def predict(msg: str) -> int:
  global model, vectorizer
  vectorized_msg = vectorizer.transform(pd.DataFrame({'text': [msg]})['text'])
  return model.predict(vectorized_msg)[0]

with gr.Blocks() as demo:
    name = gr.Textbox(label="Message")
    output = gr.Textbox(label="Prediction")
    send_btn = gr.Button("Send")
    send_btn.click(fn=predict, inputs=name, outputs=output, api_name="Send")

demo.launch(share=True, debug=True)
